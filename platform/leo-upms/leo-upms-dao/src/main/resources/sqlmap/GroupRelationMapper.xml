<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="GroupRelation">
	<sql id="getSequence">
		select nextval('grouprelation') as id
	</sql>
	<resultMap id="GroupRelationResult"
		type="com.leo.platform.upms.entity.grouprelation.GroupRelation">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Sep 30 
			12:38:13 GMT+08:00 2016. -->
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="crudType" property="crudType" jdbcType="VARCHAR" />
		<result column="code" property="code" jdbcType="VARCHAR" />
		<result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
		<result column="creator" property="creator" jdbcType="VARCHAR" />
		<result column="creatorName" property="creatorName" jdbcType="VARCHAR" />
		<result column="lastUpdateTime" property="lastUpdateTime"
			jdbcType="TIMESTAMP" />
		<result column="lastUpdator" property="lastUpdator" jdbcType="VARCHAR" />
		<result column="lastUpdatorName" property="lastUpdatorName"
			jdbcType="VARCHAR" />
		<result column="version" property="version" jdbcType="VARCHAR" />
		<result column="optLock" property="optLock" jdbcType="BIGINT" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="note" property="note" jdbcType="VARCHAR" />

		<result column="group_id" property="groupId" jdbcType="BIGINT" />
		<result column="organization_id" property="organizationId"
			jdbcType="BIGINT" />
		<result column="user_id" property="userId" jdbcType="BIGINT" />
		<result column="start_user_id" property="startUserId" jdbcType="BIGINT" />
		<result column="end_user_id" property="endUserId" jdbcType="BIGINT" />
	</resultMap>
	<sql id="groupRelationColumns">
		t.id as id,
		t.crudType as crudType,
		t.code as code,
		t.createTime as
		createTime,
		t.creator as creator,
		t.creatorName as
		creatorName,
		t.lastUpdateTime as lastUpdateTime,
		t.lastUpdator as
		lastUpdator,
		t.lastUpdatorName as lastUpdatorName,
		t.version as version,
		t.optLock as
		optLock,
		t.remark as remark,
		t.note as note,

		t.group_id as
		groupId,
		t.organization_id as organizationId,
		t.user_id as userId,
		t.start_user_id as startUserId,
		t.end_user_id as endUserId
	</sql>

	<sql id="SO_Where_Clause_Like">
		<where>
			1 = 1
			<if test=" groupId!=null ">
				AND t.group_id LIKE CONCAT('%',#{groupId},'%')
			</if>

			<if test="organizationId!=null">
				AND t.organization_id LIKE CONCAT('%',#{organizationId},'%')
			</if>

			<if test=" userId !=null">
				AND t.user_id LIKE CONCAT('%',#{userId},'%')
			</if>
			<include refid="common_sql" />
		</where>
	</sql>

	<sql id="SO_Where_Clause">
		<where>
			1 = 1
			<if test="groupId!=null">
				AND t.group_id = #{groupId}
			</if>

			<if test="organizationId!=null">
				AND t.organization_id = #{organizationId}
			</if>

			<if test="userId !=null">
				AND t.user_id = #{userId}
			</if>
			<include refid="common_sql" />
		</where>
	</sql>

	<sql id="common_sql">
		<!-- 用于查找 -->
		<if test="startUserId != null">
            <![CDATA[and t.start_user_id <= #{startUserId} ]]>
		</if>

		<if test="endUserId != null">
            <![CDATA[and t.end_user_id >= #{endUserId} ]]>
		</if>
		<!-- 用于删除的语句delete不支持别名，所以没有t -->
		<if test="delStartUserId != null and delEndUserId !=null">
           <![CDATA[and ( start_user_id >= #{delStartUserId} and end_user_id <= #{delEndUserId} ) or (user_id >= #{delStartUserId} and user_id <= #{delEndUserId}) ]]>
		</if>
	</sql>

	<insert id="insert"
		parameterType="com.leo.platform.upms.entity.grouprelation.GroupRelation">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Sep 30 
			17:54:20 GMT+08:00 2016. -->
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			<include refid="getSequence" />
		</selectKey>
		insert into sys_group_relation
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="crudType != null">
				crudType,
			</if>
			<if test="code != null">
				code,
			</if>
			<if test="createTime != null">
				createTime,
			</if>
			<if test="creator != null">
				creator,
			</if>
			<if test="creatorName != null">
				creatorName,
			</if>
			<if test="lastUpdateTime != null">
				lastUpdateTime,
			</if>
			<if test="lastUpdator != null">
				lastUpdator,
			</if>
			<if test="lastUpdatorName != null">
				lastUpdatorName,
			</if>
			<if test="version != null">
				version,
			</if>
			<if test="optLock != null">
				optLock,
			</if>
			<if test="remark != null">
				remark,
			</if>
			<if test="note != null">
				note,
			</if>
			<if test="groupId != null">
				group_id,
			</if>
			<if test="organizationId != null">
				organization_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="startUserId != null">
				start_user_id,
			</if>
			<if test="endUserId != null">
				end_user_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="crudType != null">
				#{crudType,jdbcType=VARCHAR},
			</if>
			<if test="code != null">
				#{code,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="creator != null">
				#{creator,jdbcType=VARCHAR},
			</if>
			<if test="creatorName != null">
				#{creatorName,jdbcType=VARCHAR},
			</if>
			<if test="lastUpdateTime != null">
				#{lastUpdateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="lastUpdator != null">
				#{lastUpdator,jdbcType=VARCHAR},
			</if>
			<if test="lastUpdatorName != null">
				#{lastUpdatorName,jdbcType=VARCHAR},
			</if>
			<if test="version != null">
				#{version,jdbcType=VARCHAR},
			</if>
			<if test="optLock != null">
				#{optLock,jdbcType=BIGINT},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
			<if test="note != null">
				#{note,jdbcType=VARCHAR},
			</if>
			<if test="groupId != null">
				#{groupId,jdbcType=BIGINT},
			</if>
			<if test="organizationId != null">
				#{organizationId,jdbcType=BIGINT},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=BIGINT},
			</if>
			<if test="startUserId != null">
				#{startUserId,jdbcType=BIGINT},
			</if>
			<if test="endUserId != null">
				#{endUserId,jdbcType=BIGINT},
			</if>
		</trim>
	</insert>

	<delete id="delete" parameterType="java.lang.Long">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Sep 30 
			17:54:20 GMT+08:00 2016. -->
		delete from sys_group_relation
		where id = #{id,jdbcType=BIGINT}
	</delete>

	<update id="update"
		parameterType="com.leo.platform.upms.entity.grouprelation.GroupRelation">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Sep 30 
			17:54:20 GMT+08:00 2016. -->
		update sys_group_relation
		<set>
			<if test="crudType != null">
				crudType = #{crudType,jdbcType=VARCHAR},
			</if>
			<if test="code != null">
				code = #{code,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				createTime = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="creator != null">
				creator = #{creator,jdbcType=VARCHAR},
			</if>
			<if test="creatorName != null">
				creatorName = #{creatorName,jdbcType=VARCHAR},
			</if>
			<if test="lastUpdateTime != null">
				lastUpdateTime = #{lastUpdateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="lastUpdator != null">
				lastUpdator = #{lastUpdator,jdbcType=VARCHAR},
			</if>
			<if test="lastUpdatorName != null">
				lastUpdatorName = #{lastUpdatorName,jdbcType=VARCHAR},
			</if>
			<if test="version != null">
				version = #{version,jdbcType=VARCHAR},
			</if>
			<if test="optLock != null">
				optLock = #{optLock,jdbcType=BIGINT},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="note != null">
				note = #{note,jdbcType=VARCHAR},
			</if>
			<if test="groupId != null">
				group_id = #{groupId,jdbcType=BIGINT},
			</if>
			<if test="organizationId != null">
				organization_id = #{organizationId,jdbcType=BIGINT},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=BIGINT},
			</if>
			<if test="startUserId != null">
				start_user_id = #{startUserId,jdbcType=BIGINT},
			</if>
			<if test="endUserId != null">
				end_user_id = #{endUserId,jdbcType=BIGINT},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>

	<select id="getById" parameterType="long" resultMap="GroupRelationResult">
		select
		<include refid="groupRelationColumns" />
		from sys_group_relation t
		where id = #{id,jdbcType=BIGINT}
	</select>

	<select id="getAll" resultMap="GroupRelationResult">
		select
		<include refid="groupRelationColumns" />
		from sys_group_relation t
	</select>

	<select id="getListByModel"
		parameterType="com.leo.platform.upms.model.grouprelation.GroupRelationModel"
		resultMap="GroupRelationResult">
		SELECT
		<include refid="groupRelationColumns" />
		FROM sys_group_relation t
		<choose>
			<when test="like">
				<include refid="SO_Where_Clause_Like" />
			</when>
			<otherwise>
				<include refid="SO_Where_Clause" />
			</otherwise>
		</choose>
	</select>

	<select id="getCountByModel"
		parameterType="com.leo.platform.upms.model.grouprelation.GroupRelationModel"
		resultType="long">
		SELECT COUNT(1) FROM sys_group_relation t
		<choose>
			<when test="like">
				<include refid="SO_Where_Clause_Like" />
			</when>
			<otherwise>
				<include refid="SO_Where_Clause" />
			</otherwise>
		</choose>
	</select>

	<select id="getListByIds" parameterType="List" resultMap="GroupRelationResult">
		SELECT
		<include refid="groupRelationColumns" />
		FROM sys_group_relation t WHERE t.id in
		<foreach collection="list" index="index" item="item" open="("
			close=")" separator=",">
			#{item}
		</foreach>
	</select>

	<select id="getListByField" resultMap="GroupRelationResult">
		SELECT
		<include refid="groupRelationColumns" />
		FROM sys_group_relation t WHERE T.${fieldName} = #{colValue}
	</select>
	<!-- 自定义业务逻辑sql都写在最后 -->

	<delete id="deleteInRange"
		parameterType="com.leo.platform.upms.model.grouprelation.GroupRelationModel">
		delete from sys_group_relation
		<choose>
			<when test="like">
				<include refid="SO_Where_Clause_Like" />
			</when>
			<otherwise>
				<include refid="SO_Where_Clause" />
			</otherwise>
		</choose>
	</delete>

	<select id="findGroupIds"
		parameterType="com.leo.platform.upms.model.grouprelation.GroupRelationModel"
		resultType="long">
		SELECT
		t.group_id
		<![CDATA[ FROM sys_group_relation t WHERE t.user_id = #{userId}
		or t.start_user_id <= #{userId} and t.end_user_id >= #{userId} ]]>
	</select>

	<select id="findGroupIdsList"
		parameterType="com.leo.platform.upms.model.grouprelation.GroupRelationModel"
		resultType="long">
		<![CDATA[ select t.group_id from sys_group_relation t where t.user_id=#{userId} or (t.start_user_id<=#{userId} and
		t.end_user_id>=#{userId}) or ( ]]>

		<if test="organizationIds != null and organizationIds.size > 0">
			t.organization_id in
			<foreach collection="organizationIds" index="index" item="item"
				open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		)
	</select>

	<delete id="clearDeletedGroupRelation">
		delete from sys_group_relation r where
		not exists
		(select 1 from sys_group g where r.group_id = g.id) or
		not exists
		(select 1 from sys_organization o where r.organization_id =
		o.id)
	</delete>
</mapper>