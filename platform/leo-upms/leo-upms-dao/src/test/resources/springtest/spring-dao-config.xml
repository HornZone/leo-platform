<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd 
	http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- For mail settings and future properties files -->
	<bean id="propertyConfigurer1"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="1" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:resources.properties</value>
			</list>
		</property>
	</bean>

	<!-- 扫描注解Bean -->
	<context:component-scan base-package="com.leo.platform.upms.dao">
	</context:component-scan>

    <!-- Enable @AspectJ support -->
    <aop:aspectj-autoproxy />
    
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.leo.platform.upms.dao" />
		<!-- 3.2.2版本新特性，markerInterface是用于指定一个接口的，
		当指定了markerInterface之后，MapperScannerConfigurer将只注册继承自markerInterface的接口。 -->
		<property name="markerInterface" value="com.leo.platform.common.dao.BaseDao" />
		<!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 <property name="properties"> 
			<value> mappers=tk.mybatis.mapper.common.Mapper </value> </property> -->
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${connection-upms.driverClassName}" />
		<property name="url" value="${connection-upms.url}" />
		<property name="username" value="${connection-upms.username}" />
		<property name="password" value="${connection-upms.password}" />
		<property name="initialSize" value="4" />
		<property name="minIdle" value="4" />
		<property name="maxActive" value="100" />
		<property name="maxWait" value="3000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<property name="defaultAutoCommit" value="true" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
	</bean>
	<!-- mybatis SessionFactory -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:sqlmap/**/*.xml" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sessionFactory" />
		<constructor-arg index="1" value="REUSE" />
	</bean>

	<!--事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="globalRollbackOnParticipationFailure" value="false" />
	</bean>

	<!--事务模板 -->
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
		<!--ISOLATION_DEFAULT 表示由使用的数据库决定 -->
		<property name="isolationLevelName" value="ISOLATION_DEFAULT" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- Read-only commented out to make things easier for end-users -->
			<!--tx:method name="get*" read-only="true"/ -->

			<!-- tk.mapper -->
			<tx:method name="insert*" propagation="REQUIRED" /><!--insert定义那些插入到某个位置的数据 -->
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="select*" propagation="REQUIRED" />

			<!-- 自定义sql -->
			<tx:method name="create*" propagation="REQUIRED" /><!--create类似于重新创建一个游离状态的对象 -->
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="exist*" propagation="SUPPORTS" read-only="true" />
			<!-- 其他开启事务方法 -->
			<tx:method name="add*" propagation="REQUIRED" /><!--创建并持久化 -->
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="save*" propagation="REQUIRED" /><!--save类似于一个游离状态的对象持久化 -->
			<tx:method name="merge*" propagation="REQUIRED" /><!--游离状态保存并持久化 -->
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
			<!-- 设置事务回滚机制 -->
			<!-- <tx:method name="create*" rollback-for="Exception" /> <tx:method 
				name="update*" rollback-for="Exception" /> <tx:method name="del*" rollback-for="Exception" 
				/> <tx:method name="remove*" rollback-for="Exception" /> -->
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:advisor id="managerTx" advice-ref="txAdvice"
			pointcut="execution(* com.leo.platform.upms.dao.impl..*.*(..))" order="2" />
	</aop:config>

	<!-- Enable @Transactional support -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<context:spring-configured />

</beans>
